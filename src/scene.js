// Generated by CoffeeScript 1.7.1
(function() {
  var common, json, scene, vmath,
    __slice = [].slice;

  scene = {};

  if (typeof window !== "undefined" && window !== null) {
    window.scene = scene;
  }

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = scene;
  }

  vmath = window.vmath;

  json = window.json;

  common = window.common;

  scene.Material = (function() {
    function Material(args) {
      var _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (args == null) {
        args = {};
      }
      this.ke = new vmath.vec3f((_ref = args.ke) != null ? _ref : vmath.zero3f.array());
      this.kd = new vmath.vec3f((_ref1 = args.kd) != null ? _ref1 : vmath.one3f.array());
      this.ks = new vmath.vec3f((_ref2 = args.ks) != null ? _ref2 : vmath.zero3f.array());
      this.n = (_ref3 = args.n) != null ? _ref3 : 10;
      this.kr = new vmath.vec3f((_ref4 = args.kr) != null ? _ref4 : vmath.zero3f.array());
      this.ke_txt = (_ref5 = args.ke_txt) != null ? _ref5 : null;
      this.kd_txt = (_ref6 = args.kd_txt) != null ? _ref6 : null;
      this.ks_txt = (_ref7 = args.ks_txt) != null ? _ref7 : null;
      this.kr_txt = (_ref8 = args.kr_txt) != null ? _ref8 : null;
      this.norm_txt = (_ref9 = args.norm_txt) != null ? _ref9 : null;
      this.double_sided = (_ref10 = args.double_sided) != null ? _ref10 : false;
      this.microfacet = (_ref11 = args.microfacet) != null ? _ref11 : false;
    }

    Material.prototype.clone = function() {
      return common.clone(this);
    };

    return Material;

  })();

  scene.FrameAnimation = (function() {
    function FrameAnimation(args) {
      var _ref;
      if (args == null) {
        args = {};
      }
      this.rest_frame = args.rest_frame != null ? new vmath.frame3f(args.rest_frame) : vmath.identity_frame3f.clone();
      this.keytimes = (_ref = args.keytimes) != null ? _ref : [];
      this.translation = vmath.array_vec3f(args.translation);
      this.rotation = vmath.array_vec3f(args.rotation);
    }

    return FrameAnimation;

  })();

  scene.MeshSkinning = (function() {
    function MeshSkinning(args) {
      var array;
      if (args == null) {
        args = {};
      }
      this.rest_pos = vmath.array_vec3f(args.rest_pos);
      this.rest_norm = vmath.array_vec3f(args.rest_norm);
      this.bone_ids = vmath.array_vec4i(args.bone_ids);
      this.bone_weights = vmath.array_vec4f(args.bone_weights);
      this.bone_xforms = args.bone_xforms != null ? (function() {
        var _i, _len, _ref, _results;
        _ref = args.bone_xforms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          array = _ref[_i];
          _results.push(vmath.array_mat4f(array));
        }
        return _results;
      })() : [];
    }

    return MeshSkinning;

  })();

  scene.MeshSimulation = (function() {
    function MeshSimulation(args) {
      var _ref, _ref1;
      if (args == null) {
        args = {};
      }
      this.init_pos = vmath.array_vec3f(args.init_pos);
      this.init_vel = vmath.array_vec3f(args.init_vel);
      this.mass = (_ref = args.mass) != null ? _ref : [];
      this.pinned = (_ref1 = args.pinned) != null ? _ref1 : [];
      this.springs = scene.array_spring(args.springs);
      this.vel = vmath.array_vec3f(args.vel);
      this.force = vmath.array_vec3f(args.force);
    }

    return MeshSimulation;

  })();

  scene.Spring = (function() {
    function Spring(args) {
      var _ref, _ref1, _ref2;
      if (args == null) {
        args = {};
      }
      this.ids = new vmath.vec2i(args.ids);
      this.restlength = (_ref = args.restlength) != null ? _ref : null;
      this.ks = (_ref1 = args.ks) != null ? _ref1 : null;
      this.kd = (_ref2 = args.kd) != null ? _ref2 : null;
    }

    return Spring;

  })();

  scene.array_spring = function(list) {
    var spring, _i, _len, _results;
    if (list != null) {
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        spring = list[_i];
        _results.push(new scene.Spring(spring));
      }
      return _results;
    }
  };

  scene.MeshCollision = (function() {
    function MeshCollision(args) {
      var _ref, _ref1;
      if (args == null) {
        args = {};
      }
      this.radius = (_ref = args.radius) != null ? _ref : null;
      this.isquad = (_ref1 = args.isquad) != null ? _ref1 : null;
    }

    return MeshCollision;

  })();

  scene.Mesh = (function() {
    function Mesh(args) {
      var _ref, _ref1, _ref2, _ref3;
      if (args == null) {
        args = {};
      }
      this.frame = args.frame != null ? new vmath.frame3f(args.frame) : vmath.identity_frame3f.clone();
      this.pos = vmath.array_vec3f(args.pos);
      this.norm = vmath.array_vec3f(args.norm);
      this.texcoord = vmath.array_vec2f(args.texcoord);
      this.triangle = vmath.array_vec3i(args.triangle);
      this.quad = vmath.array_vec4i(args.quad);
      this.point = (_ref = args.point) != null ? _ref : [];
      this.line = vmath.array_vec2i(args.line);
      this.spline = vmath.array_vec4i(args.spline);
      this.mat = new scene.Material(args.material);
      this.subdivision_catmullclark_level = (_ref1 = args.subdivision_catmullclark_level) != null ? _ref1 : 0;
      this.subdivision_catmullclark_smooth = (_ref2 = args.subdivision_catmullclark_smooth) != null ? _ref2 : false;
      this.subdivision_bezier_level = (_ref3 = args.subdivision_bezier_level) != null ? _ref3 : 0;
      this.animation = args.animation != null ? new scene.FrameAnimation(args.animation) : null;
      this.skinning = args.skinning != null ? new scene.MeshSkinning(args.skinning) : null;
      console.log("json_skinning not implemented");
      this.simulation = args.simulation != null ? new scene.MeshSimulation(args.simulation) : null;
      this.collision = null;
      this.bvh = null;
    }

    return Mesh;

  })();

  scene.Surface = (function() {
    function Surface(args) {
      var _ref, _ref1, _ref2;
      if (args == null) {
        args = {};
      }
      this.frame = args.frame != null ? new vmath.frame3f(args.frame) : vmath.identity_frame3f.clone();
      this.radius = (_ref = args.radius) != null ? _ref : 1;
      this.isquad = (_ref1 = args.isquad) != null ? _ref1 : false;
      this.mat = new scene.Material(args.material);
      this.animation = args.animation ? new scene.FrameAnimation(args.animation) : null;
      this.display_mesh = (_ref2 = args.display_mesh) != null ? _ref2 : null;
    }

    return Surface;

  })();

  scene.Light = (function() {
    function Light(args) {
      if (args == null) {
        args = {};
      }
      this.frame = args.frame != null ? new vmath.frame3f(args.frame) : vmath.identity_frame3f.clone();
      this.intensity = args.intensity != null ? new vmath.vec3f(args.intensity) : vmath.one3f.clone();
    }

    return Light;

  })();

  scene.Camera = (function() {
    function Camera(args) {
      var _ref, _ref1, _ref2, _ref3;
      if (args == null) {
        args = {};
      }
      this.frame = args.frame != null ? new vmath.frame3f(args.frame) : vmath.identity_frame3f.clone();
      this.width = (_ref = args.width) != null ? _ref : 1;
      this.height = (_ref1 = args.height) != null ? _ref1 : 1;
      this.dist = (_ref2 = args.dist) != null ? _ref2 : 1;
      this.focus = (_ref3 = args.focus) != null ? _ref3 : 1;
    }

    return Camera;

  })();

  scene.SceneAnimation = (function() {
    function SceneAnimation(args) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (args == null) {
        args = {};
      }
      this.time = (_ref = args.time) != null ? _ref : 0;
      this.length = (_ref1 = args.length) != null ? _ref1 : 0;
      this.dest = (_ref2 = args.dt) != null ? _ref2 : 1 / 30;
      this.simsteps = (_ref3 = args.simsteps) != null ? _ref3 : 100;
      this.gravity = new vmath.vec3f((_ref4 = args.gravity) != null ? _ref4 : [0, -9.8, 0]);
      this.bounce_dump = new vmath.vec2f((_ref5 = args.bounce_dump) != null ? _ref5 : [0.001, 0.5]);
      this.gpu_skinning = (_ref6 = args.gpu_skinning) != null ? _ref6 : false;
    }

    return SceneAnimation;

  })();

  scene.new_lookat_camera = function(args) {
    var center, eye, ret, up, _ref, _ref1, _ref2;
    ret = new scene.Camera;
    eye = args.from != null ? new vmath.vec3f(args.from) : vmath.z3f.clone();
    center = args.to != null ? new vmath.vec3f(args.to) : vmath.zero3f.clone();
    up = args.up != null ? new vmath.vec3f(args.up) : vmath.y3f.clone();
    ret.frame = vmath.lookat_frame(eye, center, up, true);
    ret.width = (_ref = args.width) != null ? _ref : 1;
    ret.height = (_ref1 = args.height) != null ? _ref1 : 1;
    ret.dist = (_ref2 = args.dist) != null ? _ref2 : 1;
    ret.focus = vmath.llength(vmath.sub(eye, center));
    return ret;
  };

  scene.Scene = (function() {
    function Scene(args) {
      var light, mesh, surface, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (args == null) {
        args = {};
      }
      this.camera = new scene.Camera(args.camera);
      if (args.lookat_camera != null) {
        this.camera = scene.new_lookat_camera(args.lookat_camera);
      }
      this.meshes = args.meshes != null ? (function() {
        var _i, _len, _ref, _results;
        _ref = args.meshes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mesh = _ref[_i];
          _results.push(new scene.Mesh(mesh));
        }
        return _results;
      })() : [];
      if (args.json_meshes != null) {
        (_ref = this.meshes).push.apply(_ref, (function() {
          var _i, _len, _ref, _results;
          _ref = json.load_json(scene.scene_path + args.json_meshes);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            mesh = _ref[_i];
            _results.push(new scene.Mesh(mesh));
          }
          return _results;
        })());
      }
      this.surfaces = args.surfaces != null ? (function() {
        var _i, _len, _ref1, _results;
        _ref1 = args.surfaces;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          surface = _ref1[_i];
          _results.push(new scene.Surface(surface));
        }
        return _results;
      })() : [];
      this.lights = args.lights != null ? (function() {
        var _i, _len, _ref1, _results;
        _ref1 = args.lights;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          light = _ref1[_i];
          _results.push(new scene.Light(light));
        }
        return _results;
      })() : [];
      this.background = args.background != null ? new vmath.vec3f(args.background) : vmath.mul(vmath.one3f, 0.2);
      this.background_txt = (_ref1 = args.draw_animated) != null ? _ref1 : null;
      this.ambient = args.ambient != null ? new vmath.vec3f(args.ambient) : vmath.mul(vmath.one3f, 0.2);
      this.animation = new scene.SceneAnimation(args.animation);
      this.image_width = (_ref2 = args.image_width) != null ? _ref2 : 512;
      this.image_height = (_ref3 = args.image_height) != null ? _ref3 : 512;
      this.image_samples = (_ref4 = args.image_samples) != null ? _ref4 : 1;
      this.draw_wireframe = (_ref5 = args.draw_wireframe) != null ? _ref5 : false;
      this.draw_animated = (_ref6 = args.draw_animated) != null ? _ref6 : false;
      this.draw_gpu_skinning = (_ref7 = args.draw_gpu_skinning) != null ? _ref7 : false;
      this.draw_captureimage = (_ref8 = args.draw_captureimage) != null ? _ref8 : false;
      this.path_max_depth = (_ref9 = args.path_max_depth) != null ? _ref9 : 2;
      this.path_sample_brdf = (_ref10 = args.path_sample_brdf) != null ? _ref10 : true;
      this.path_shadows = (_ref11 = args.path_shadows) != null ? _ref11 : true;
    }

    return Scene;

  })();

  scene.json_parse_scene = function(obj) {
    return new scene.Scene(obj);
  };

  scene.scene_path = "";

  scene.scene_filename = "";

  scene.load_json_scene = function(filename) {
    var s, _i, _ref;
    _ref = filename.split("/"), scene.scene_path = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), scene.scene_filename = _ref[_i++];
    scene.scene_path = scene.scene_path.join("/");
    s = scene.json_parse_scene(json.load_json(filename));
    return s;
  };

}).call(this);

//# sourceMappingURL=scene.map
